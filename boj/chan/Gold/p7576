package org.example.boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class P7576 {
    static int[] moveX = {0, 0, -1, 1}; // 상하좌우
    static int[] moveY = {1, -1, 0, 0};
    static boolean[][] isVisited;
    static int answer = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        int m = Integer.parseInt(st.nextToken());
        int n = Integer.parseInt(st.nextToken());
        int[][] map = new int[n][m];
        isVisited = new boolean[n][m];
        List<int[]> tomatos = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());

            for (int j = 0; j < m; j++) {
                map[i][j] = Integer.parseInt(st.nextToken());

                if (map[i][j] == 1) {
                    tomatos.add(new int[]{i, j});
                }
            }
        }

        answer = Math.min(answer, bfs(tomatos, map));


        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (map[i][j] == 0 && isVisited[i][j] == false) {
                    answer = -1;
                    break;
                }
            }
        }

        System.out.println(answer);
    }

    public static int bfs(List<int[]> tomatos, int[][] map) {
        Queue<int[]> queue = new LinkedList<>();

        for (int i = 0; i < tomatos.size(); i++) {
            queue.add(new int[]{tomatos.get(i)[0], tomatos.get(i)[1], 0});
        }

        int sum = 0;

        while (!queue.isEmpty()) {
            int[] cur = queue.poll();
            sum = cur[2];

            for (int i = 0; i < 4; i++) {
                int nextX = cur[0] + moveX[i];
                int nextY = cur[1] + moveY[i];

                if (nextX >= 0 && nextX < map.length && nextY >= 0 && nextY < map[0].length &&
                        isVisited[nextX][nextY] == false && map[nextX][nextY] == 0) {
                    isVisited[nextX][nextY] = true;
                    queue.add(new int[]{nextX, nextY, cur[2] + 1});
                }
            }
        }

        return sum;
    }
}
